# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Config(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, threshold: float=None, ping_retries: int=None, monitoring_period: int=None):  # noqa: E501
        """Config - a model defined in Swagger

        :param threshold: The threshold of this Config.  # noqa: E501
        :type threshold: float
        :param ping_retries: The ping_retries of this Config.  # noqa: E501
        :type ping_retries: int
        :param monitoring_period: The attack_interval of this Config.  # noqa: E501
        :type monitoring_period: int
        """
        self.swagger_types = {
            'threshold': float,
            'ping_retries': int,
            'attack_interval': int
        }

        self.attribute_map = {
            'threshold': 'threshold',
            'ping_retries': 'ping-retries',
            'attack_interval': 'monitoring-period'
        }

        self._threshold = threshold
        self._ping_retries = ping_retries
        self._monitoring_period = monitoring_period

    @classmethod
    def from_dict(cls, dikt) -> 'Config':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Config of this Config.  # noqa: E501
        :rtype: Config
        """
        return util.deserialize_model(dikt, cls)

    @property
    def threshold(self) -> float:
        """Gets the threshold of this Config.


        :return: The threshold of this Config.
        :rtype: float
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold: float):
        """Sets the threshold of this Config.


        :param threshold: The threshold of this Config.
        :type threshold: float
        """

        self._threshold = threshold

    @property
    def ping_retries(self) -> int:
        """Gets the ping_retries of this Config.


        :return: The ping_retries of this Config.
        :rtype: int
        """
        return self._ping_retries

    @ping_retries.setter
    def ping_retries(self, ping_retries: int):
        """Sets the ping_retries of this Config.


        :param ping_retries: The ping_retries of this Config.
        :type ping_retries: int
        """

        self._ping_retries = ping_retries

    @property
    def monitoring_period(self) -> int:
        """Gets the attack_interval of this Config.


        :return: The attack_interval of this Config.
        :rtype: int
        """
        return self._monitoring_period

    @monitoring_period.setter
    def monitoring_period(self, monitoring_period: int):
        """Sets the attack_interval of this Config.


        :param monitoring_period: The attack_interval of this Config.
        :type monitoring_period: int
        """

        self._monitoring_period = monitoring_period
